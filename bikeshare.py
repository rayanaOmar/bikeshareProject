# -*- coding: utf-8 -*-
"""bikeshare.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18HDU-tLuqM1LihjutaGH--hRuQpAEfYz
"""

import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

#Store all the city, monthes and days into array 
cityies = ['chicago', 'new york city', 'washington']
months = ['january', 'february', 'march', 'april', 'may', 'june','all']
days = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday','all']

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = ''
    while(True):
      city = str(input('Would you like to see data for Chicago, New York City, or Washington? ')).lower()
      if city in cityies:
        break
      else: 
        print('Error! Please Enter A Valid City Name')

    userFilter = ''
    while(True):
        if(userFilter == 'month' or userFilter == 'day' or userFilter == 'none'):
            break
        else:
            userFilter = str(input('Would you like to filter the data by month, day, or not at all? Type "none" if not at all: ')).lower()
    
    month = 'all'
    # TO DO: get user input for month (all, january, february, ... , june)
    if(userFilter == 'month'):
      while(True):
        month = str(input('Which month - January, February, March, April, May, June or All? ')).lower()
        if month in months: 
          break
        else:
          print('Error! Please Enter A Valid Month Name')
          

    day = 'all'
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    if(userFilter == 'day'):
      while(True):
         day = str(input('Which day? Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday or All? ')).lower()
         if day in days:
           break
         else:
           print('Error! Please Enter A Valid Day Name')
          
      
        
    print('-'*40)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    #read the csv files.
    df = pd.read_csv(CITY_DATA[city.lower()])
    
    #converting the start time to datetime type 
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    #converting the end time to datetime type
    df['End Time'] = pd.to_datetime(df['End Time'])
    
    #Create a new column (hour)
    df['Hour'] = df['Start Time'].dt.hour
    
    #Create a new column (month)
    df['month'] = df['Start Time'].dt.month
    
    #Create a new column (day)
    df['day of week'] = df['Start Time'].dt.day_name()    
 
    
    #Filtering by month.
    if(month != 'all'):
      index_of_month = months.index(month) + 1
      df = df[df['month'] == index_of_month]
    
    #Filtering by day.
    if(day != 'all'):
      df = df[df['day of week'] == day.title()]

    
    return df

"""Time Stats Function """

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    print('The Most common month is : ', df['month'].value_counts().index[0])

    # display the most common day of week
    print('The Most common day of week is : ', df['day of week'].value_counts().index[0]) 

    # display the most common start hour
    print('The Most common start hour is : ', df['Hour'].value_counts().index[0])


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

"""Station Stats Function """

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    print('The Most common start station: ', df['Start Station'].value_counts().index[0])

    # display most commonly used end station
    print('The Most common end station: ', df['End Station'].value_counts().index[0])

    # display most frequent combination of start station and end station trip
    print(pd.DataFrame(df.groupby(['Start Station','End Station']).size().sort_values(ascending = False)).iloc[0])


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

"""Trip Duration Stats Function """

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    print('The Total travel time is : ', df['Trip Duration'].sum())


    # display mean travel time
    print('The Mean travel time is: ', df['Trip Duration'].mean())


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

"""User Stats Function """

def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print('Count Of User Types is: ', df['User Type'].value_counts())

    # Check the city first
    if(city == 'chicago' or city == 'new york'): 
      # Display counts of gender
      print()
      print('Count Of Gender is: ', df['Gender'].value_counts())
      print()

      # Display earliest, most recent, and most common year of birth
      print('The Most Earliest Year Of Birth: ', df['Birth Year'].sort_values().iloc[0])
      print('The Most Recent Year Of Birth: ', df['Birth Year'].sort_values(ascending = False).iloc[0])
      print('The Most Common Year Of Birth: ', df['Birth Year'].value_counts().index[0])


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

"""Show data to the user"""

#view raw data to user     
def show_data(df):
    row = 0
    while True:
        view_data = input("Would you like to view 5 rows of individual trip data? Enter yes or no? ").lower()
        #row = 0
        if view_data == "yes":
            print(df.iloc[row : row + 5])
            row += 5
        elif view_data == "no":
            break
        else: #validate user input
            print("Sorry! You entered Wrong Input, try Again!")

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)
        show_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n').lower()
        if restart.lower() != 'yes':
            break

if __name__ == "__main__":
	main()